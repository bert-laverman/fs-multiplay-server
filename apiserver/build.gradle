apply plugin: 'java'
apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'javax:javaee-api:7.0'

    providedCompile 'fish.payara.extras:payara-micro:4.1.2.174'

    compile project(':authlib')

    compile 'com.auth0:java-jwt:3.0.2'
    compile 'org.apache.logging.log4j:log4j-api:2.9.1'
    compile 'org.apache.logging.log4j:log4j-core:2.9.1'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jdk-http:2.22.1'
}

war.setBaseName('ROOT')
war.setVersion('')

task run(type: Exec, dependsOn: war) {
    commandLine('java', '-jar', getMicroPath(), '--deploy', war.archivePath)
}

task uberJar(type: Exec, dependsOn: war) {
    String uberJarPath = 'build/libs/' + rootProject.name + '.jar'
    commandLine('java', '-jar', getMicroPath(), '--deploy', war.archivePath, '--outputUberJar', uberJarPath)
}

def String getMicroPath() {
    configurations.providedCompile.find { it.name =~ /payara-micro.*\.jar/ }.absolutePath
}

task uberZip(type: Zip, dependsOn: uberJar) {
    from 'build/libs/' + rootProject.name + '.jar'
    from 'src/launcher'
}

task zip(type: Exec) {
    commandLine('git', 'archive', '-o', 'build/' + rootProject.name + '_src.zip', 'HEAD')
    // This task will fail if the 'build' folder does not exist.
}
